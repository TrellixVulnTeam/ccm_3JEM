{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { Component } from 'react';\nimport http from '../../utils/http';\nimport { injectIntl } from 'react-intl';\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      uploadLoading: false,\n      dataSource: [],\n      pagingConfig: props.pagination === false ? false : this.setPagination(props.pagination || {})\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.url && this.props.isShow) {\n      const {\n        current,\n        pageSize\n      } = this.state.pagingConfig;\n      pageSize ? this.queryListByPaging(current, pageSize) : this.queryList();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      url,\n      search,\n      otherParam\n    } = this.props;\n\n    if (prevProps.search !== search && url || prevProps.otherParam !== otherParam && url || prevProps.url !== url) {\n      const {\n        pageSize\n      } = this.state.pagingConfig;\n      pageSize ? this.queryListByPaging(1, pageSize) : this.queryList();\n    }\n  }\n\n  setPagination(data) {\n    const {\n      onChange,\n      onShowSizeChange\n    } = data;\n    const {\n      intl\n    } = this.props;\n    return Object.assign({\n      showSizeChanger: true,\n      showQuickJumper: true,\n      pageSize: 10,\n      current: 1,\n      showTotal: (total, range) => `${intl.messages.lang59}${total}${intl.messages.lang60}${range[0]}-${range[1]}${intl.messages.lang61}`\n    }, data, {\n      onChange: (current, pageSize) => this.queryListByPaging(current, pageSize).then(() => onChange === null || onChange === void 0 ? void 0 : onChange(current, pageSize)),\n      onShowSizeChange: (current, pageSize) => this.queryListByPaging(current, pageSize).then(() => onShowSizeChange === null || onShowSizeChange === void 0 ? void 0 : onShowSizeChange(current, pageSize))\n    });\n  }\n\n  queryListByPaging(pn, ps) {\n    this.setState({\n      loading: true\n    });\n    const {\n      url,\n      search,\n      otherParam\n    } = this.props;\n    return http.get(`${url}?pn=${pn}&ps=${ps}${otherParam || ''}`, ({\n      rows,\n      total\n    }) => {\n      this.setState({\n        loading: false,\n        dataSource: rows,\n        pagingConfig: Object.assign({}, this.state.pagingConfig, {\n          current: pn,\n          pageSize: ps,\n          total\n        })\n      });\n    });\n  } // 自定义 otherParam 为对象\n\n\n  queryList() {\n    this.setState({\n      loading: true\n    });\n    const {\n      url,\n      search,\n      otherParam\n    } = this.props;\n    return http.get(url, {\n      params: Object.assign(search, otherParam)\n    }, data => {\n      this.setState({\n        loading: false,\n        dataSource: data\n      });\n    });\n  } // 若存在复选框，获取选中数据\n\n\n  getSelectedData() {// return this.state.selectedList;\n  }\n\n  refreshGrid(isCurrent) {\n    const {\n      current,\n      pageSize\n    } = this.state.pagingConfig;\n    pageSize ? this.queryListByPaging(isCurrent ? current : 1, pageSize) : this.queryList();\n  }\n\n  render() {\n    const {\n      loading,\n      dataSource,\n      pagingConfig\n    } = this.state;\n\n    const _this$props = this.props,\n          {\n      url,\n      search,\n      pagination,\n      className\n    } = _this$props,\n          params = _objectWithoutProperties(_this$props, [\"url\", \"search\", \"pagination\", \"className\"]);\n\n    return __jsx(_Table, _extends({\n      className: \"mx-grid\",\n      rowKey: \"_id\",\n      loading: loading,\n      pagination: pagingConfig,\n      dataSource: dataSource\n    }, params));\n  }\n\n}\n\nexport default injectIntl(Grid);","map":null,"metadata":{},"sourceType":"module"}