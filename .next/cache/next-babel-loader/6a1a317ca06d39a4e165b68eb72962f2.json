{"ast":null,"code":"import \"antd/lib/config-provider/style\";\nimport _ConfigProvider from \"antd/lib/config-provider\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useEffect, useState } from 'react';\nimport { getCookies, setCookie } from './cookie';\nimport zh_CN from 'antd/lib/locale/zh_CN';\nimport enUS from 'antd/lib/locale/en_US';\nimport enLang from 'react-intl/locale-data/en';\nimport zhLang from 'react-intl/locale-data/zh';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport zh from '../utils/lang/zh';\nimport en from '../utils/lang/en';\nimport ContextProvider from '../reducer';\nimport { isMobile, parseQueryString } from './common';\nimport Router from 'next/router';\naddLocaleData([...enLang, ...zhLang]);\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const handleGetLang = () => {\n      if (props.language === 'en') {\n        return 'en';\n      } else {\n        return 'zh';\n      }\n    };\n\n    const {\n      0: lang,\n      1: setLang\n    } = useState(handleGetLang());\n\n    const handleLang = (la, isAnt) => {\n      switch (la) {\n        case 'en':\n          if (isAnt) {\n            return enUS;\n          } else {\n            return en;\n          }\n\n        default:\n          if (isAnt) {\n            return zh_CN;\n          } else {\n            return zh;\n          }\n\n      }\n    };\n\n    useEffect(() => {\n      // 兼容之前的hash 地址\n      handlePath();\n\n      if (props.lang) {\n        setCookie('lang', props.lang, 365);\n      }\n\n      window.handleChangeLang = type => {\n        setCookie('lang', type, 365);\n        setLang(type);\n      };\n\n      var lastTouchEnd = 0;\n      document.addEventListener('touchstart', function (event) {\n        if (event.touches.length > 1) {\n          event.preventDefault();\n        }\n      });\n      document.addEventListener('touchend', event => {\n        var now = new Date().getTime();\n\n        if (now - lastTouchEnd <= 300) {\n          event.preventDefault();\n        }\n\n        lastTouchEnd = now;\n      }, false); // 阻止双指放大\n\n      document.addEventListener('gesturestart', function (event) {\n        event.preventDefault();\n      }); // dispatch({ type: 'SET_WINDOW', data: window.innerWidth })\n\n      return () => {\n        window.handleChangeLang = null;\n      };\n    }, []);\n\n    const handlePath = () => {\n      const {\n        href,\n        hash\n      } = window.location;\n\n      if (hash.startsWith('#/hashsearch?id=')) {\n        const id = parseQueryString(href).id;\n        location.href = `/hash/${id}`;\n      } else if (hash.startsWith('#/addresssearch?id=')) {\n        const id = parseQueryString(href).id;\n        location.href = `/addr/${id}`;\n      }\n    };\n\n    return __jsx(_ConfigProvider, {\n      locale: handleLang(lang, true)\n    }, __jsx(IntlProvider, {\n      locale: lang,\n      messages: handleLang(lang, false)\n    }, __jsx(ContextProvider, {\n      mobile: props.mobile\n    }, __jsx(WrappedComponent, _extends({}, props, {\n      language: props.language\n    })))));\n  };\n\n  Wrapper.getInitialProps = async ctx => {\n    var _ctx$router$asPath, _ctx$ctx$res;\n\n    if (!((_ctx$router$asPath = ctx.router.asPath) === null || _ctx$router$asPath === void 0 ? void 0 : _ctx$router$asPath.startsWith('/_next/static')) && ((_ctx$ctx$res = ctx.ctx.res) === null || _ctx$ctx$res === void 0 ? void 0 : _ctx$ctx$res.statusCode) === 404) {\n      ctx.ctx.res.writeHead(302, {\n        Location: '/'\n      });\n      ctx.ctx.res.end();\n    }\n\n    const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n    let language;\n    let lang = '';\n    const mobile = true ? isMobile(ctx.ctx.req.headers['user-agent']) : isMobile(window.navigator.userAgent);\n\n    if (ctx.ctx.query.lang) {\n      language = ctx.ctx.query.lang === 'en' ? 'en' : 'zh';\n      lang = language;\n    } else {\n      language = getCookies(ctx.ctx.req)['lang'] || 'zh';\n    }\n\n    ctx.ctx.language = language;\n    return _objectSpread({}, componentProps, {\n      language,\n      lang,\n      mobile\n    });\n  };\n\n  return Wrapper;\n};","map":null,"metadata":{},"sourceType":"module"}