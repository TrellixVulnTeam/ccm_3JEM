{"ast":null,"code":"'use strict';\n\nconst BigNumber = require('bignumber.js');\n\nconst etherUnits = function () {};\n\netherUnits.unitMap = {\n  wei: '1',\n  kwei: '1000',\n  ada: '1000',\n  femtoether: '1000',\n  mwei: '1000000',\n  babbage: '1000000',\n  picoether: '1000000',\n  gwei: '1000000000',\n  shannon: '1000000000',\n  nanoether: '1000000000',\n  nano: '1000000000',\n  szabo: '1000000000000',\n  microether: '1000000000000',\n  micro: '1000000000000',\n  finney: '1000000000000000',\n  milliether: '1000000000000000',\n  milli: '1000000000000000',\n  ether: '1000000000000000000',\n  kether: '1000000000000000000000',\n  grand: '1000000000000000000000',\n  einstein: '1000000000000000000000',\n  mether: '1000000000000000000000000',\n  gether: '1000000000000000000000000000',\n  tether: '1000000000000000000000000000000'\n};\n\netherUnits.getValueOfUnit = function (unit) {\n  unit = unit ? unit.toLowerCase() : 'ether';\n  const unitValue = this.unitMap[unit];\n\n  if (unitValue === undefined) {\n    throw new Error(globalFuncs.errorMsgs[4] + JSON.stringify(this.unitMap, null, 2));\n  }\n\n  return new BigNumber(unitValue, 10);\n};\n\netherUnits.toEther = function (number, unit) {\n  const returnValue = new BigNumber(this.toWei(number, unit)).div(this.getValueOfUnit('ether'));\n  return returnValue.toString(10);\n};\n\netherUnits.toGwei = function (number, unit) {\n  const returnValue = new BigNumber(this.toWei(number, unit)).div(this.getValueOfUnit('gwei'));\n  return returnValue.toString(10);\n};\n\netherUnits.toWei = function (number, unit) {\n  const returnValue = new BigNumber(String(number)).times(this.getValueOfUnit(unit));\n  return returnValue.toString(10);\n};\n\nmodule.exports = etherUnits;","map":{"version":3,"sources":["/Users/libaozhong/cr/ccm-front/lib/etherUnits.js"],"names":["BigNumber","require","etherUnits","unitMap","wei","kwei","ada","femtoether","mwei","babbage","picoether","gwei","shannon","nanoether","nano","szabo","microether","micro","finney","milliether","milli","ether","kether","grand","einstein","mether","gether","tether","getValueOfUnit","unit","toLowerCase","unitValue","undefined","Error","globalFuncs","errorMsgs","JSON","stringify","toEther","number","returnValue","toWei","div","toString","toGwei","String","times","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AAEA,MAAMC,UAAU,GAAG,YAAY,CAAE,CAAjC;;AACAA,UAAU,CAACC,OAAX,GAAqB;AACnBC,EAAAA,GAAG,EAAE,GADc;AAEnBC,EAAAA,IAAI,EAAE,MAFa;AAGnBC,EAAAA,GAAG,EAAE,MAHc;AAInBC,EAAAA,UAAU,EAAE,MAJO;AAKnBC,EAAAA,IAAI,EAAE,SALa;AAMnBC,EAAAA,OAAO,EAAE,SANU;AAOnBC,EAAAA,SAAS,EAAE,SAPQ;AAQnBC,EAAAA,IAAI,EAAE,YARa;AASnBC,EAAAA,OAAO,EAAE,YATU;AAUnBC,EAAAA,SAAS,EAAE,YAVQ;AAWnBC,EAAAA,IAAI,EAAE,YAXa;AAYnBC,EAAAA,KAAK,EAAE,eAZY;AAanBC,EAAAA,UAAU,EAAE,eAbO;AAcnBC,EAAAA,KAAK,EAAE,eAdY;AAenBC,EAAAA,MAAM,EAAE,kBAfW;AAgBnBC,EAAAA,UAAU,EAAE,kBAhBO;AAiBnBC,EAAAA,KAAK,EAAE,kBAjBY;AAkBnBC,EAAAA,KAAK,EAAE,qBAlBY;AAmBnBC,EAAAA,MAAM,EAAE,wBAnBW;AAoBnBC,EAAAA,KAAK,EAAE,wBApBY;AAqBnBC,EAAAA,QAAQ,EAAE,wBArBS;AAsBnBC,EAAAA,MAAM,EAAE,2BAtBW;AAuBnBC,EAAAA,MAAM,EAAE,8BAvBW;AAwBnBC,EAAAA,MAAM,EAAE;AAxBW,CAArB;;AA0BAzB,UAAU,CAAC0B,cAAX,GAA4B,UAAUC,IAAV,EAAgB;AAC1CA,EAAAA,IAAI,GAAGA,IAAI,GAAGA,IAAI,CAACC,WAAL,EAAH,GAAwB,OAAnC;AACA,QAAMC,SAAS,GAAG,KAAK5B,OAAL,CAAa0B,IAAb,CAAlB;;AACA,MAAIE,SAAS,KAAKC,SAAlB,EAA6B;AAC3B,UAAM,IAAIC,KAAJ,CACJC,WAAW,CAACC,SAAZ,CAAsB,CAAtB,IAA2BC,IAAI,CAACC,SAAL,CAAe,KAAKlC,OAApB,EAA6B,IAA7B,EAAmC,CAAnC,CADvB,CAAN;AAGD;;AACD,SAAO,IAAIH,SAAJ,CAAc+B,SAAd,EAAyB,EAAzB,CAAP;AACD,CATD;;AAWA7B,UAAU,CAACoC,OAAX,GAAqB,UAAUC,MAAV,EAAkBV,IAAlB,EAAwB;AAC3C,QAAMW,WAAW,GAAG,IAAIxC,SAAJ,CAAc,KAAKyC,KAAL,CAAWF,MAAX,EAAmBV,IAAnB,CAAd,EAAwCa,GAAxC,CAClB,KAAKd,cAAL,CAAoB,OAApB,CADkB,CAApB;AAGA,SAAOY,WAAW,CAACG,QAAZ,CAAqB,EAArB,CAAP;AACD,CALD;;AAOAzC,UAAU,CAAC0C,MAAX,GAAoB,UAAUL,MAAV,EAAkBV,IAAlB,EAAwB;AAC1C,QAAMW,WAAW,GAAG,IAAIxC,SAAJ,CAAc,KAAKyC,KAAL,CAAWF,MAAX,EAAmBV,IAAnB,CAAd,EAAwCa,GAAxC,CAClB,KAAKd,cAAL,CAAoB,MAApB,CADkB,CAApB;AAGA,SAAOY,WAAW,CAACG,QAAZ,CAAqB,EAArB,CAAP;AACD,CALD;;AAOAzC,UAAU,CAACuC,KAAX,GAAmB,UAAUF,MAAV,EAAkBV,IAAlB,EAAwB;AACzC,QAAMW,WAAW,GAAG,IAAIxC,SAAJ,CAAc6C,MAAM,CAACN,MAAD,CAApB,EAA8BO,KAA9B,CAClB,KAAKlB,cAAL,CAAoBC,IAApB,CADkB,CAApB;AAGA,SAAOW,WAAW,CAACG,QAAZ,CAAqB,EAArB,CAAP;AACD,CALD;;AAOAI,MAAM,CAACC,OAAP,GAAiB9C,UAAjB","sourcesContent":["'use strict';\n\nconst BigNumber = require('bignumber.js');\n\nconst etherUnits = function () {};\netherUnits.unitMap = {\n  wei: '1',\n  kwei: '1000',\n  ada: '1000',\n  femtoether: '1000',\n  mwei: '1000000',\n  babbage: '1000000',\n  picoether: '1000000',\n  gwei: '1000000000',\n  shannon: '1000000000',\n  nanoether: '1000000000',\n  nano: '1000000000',\n  szabo: '1000000000000',\n  microether: '1000000000000',\n  micro: '1000000000000',\n  finney: '1000000000000000',\n  milliether: '1000000000000000',\n  milli: '1000000000000000',\n  ether: '1000000000000000000',\n  kether: '1000000000000000000000',\n  grand: '1000000000000000000000',\n  einstein: '1000000000000000000000',\n  mether: '1000000000000000000000000',\n  gether: '1000000000000000000000000000',\n  tether: '1000000000000000000000000000000',\n};\netherUnits.getValueOfUnit = function (unit) {\n  unit = unit ? unit.toLowerCase() : 'ether';\n  const unitValue = this.unitMap[unit];\n  if (unitValue === undefined) {\n    throw new Error(\n      globalFuncs.errorMsgs[4] + JSON.stringify(this.unitMap, null, 2)\n    );\n  }\n  return new BigNumber(unitValue, 10);\n};\n\netherUnits.toEther = function (number, unit) {\n  const returnValue = new BigNumber(this.toWei(number, unit)).div(\n    this.getValueOfUnit('ether')\n  );\n  return returnValue.toString(10);\n};\n\netherUnits.toGwei = function (number, unit) {\n  const returnValue = new BigNumber(this.toWei(number, unit)).div(\n    this.getValueOfUnit('gwei')\n  );\n  return returnValue.toString(10);\n};\n\netherUnits.toWei = function (number, unit) {\n  const returnValue = new BigNumber(String(number)).times(\n    this.getValueOfUnit(unit)\n  );\n  return returnValue.toString(10);\n};\n\nmodule.exports = etherUnits;\n"]},"metadata":{},"sourceType":"script"}