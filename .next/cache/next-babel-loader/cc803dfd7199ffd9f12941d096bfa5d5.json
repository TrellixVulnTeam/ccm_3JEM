{"ast":null,"code":"import Router from './core/router';\nimport { filterBlocks } from '../utils/common';\nimport mongoose from 'mongoose';\nconst {\n  Block,\n  Transaction,\n  TokenTransfer,\n  Market\n} = mongoose.models;\nRouter.get('/home/info', async ({\n  url\n}, res) => {\n  console.log(\"开始查询home\");\n  const block = await Block.findOne({}).sort({\n    number: -1\n  }).limit(1);\n  const market = await Market.findOne({});\n  const transactionNumber = await Transaction.find({}).count();\n  const tokenTransfer = await TokenTransfer.find({}).count();\n  const tradeNumber = transactionNumber + tokenTransfer;\n  return {\n    block: block.number,\n    change: market ? market.change : \"\",\n    vol: market ? market.vol : \"\",\n    last: market ? market.last : \"\",\n    tradeNumber\n  };\n});\nRouter.get('/home/charts', async ({\n  url\n}, res) => {\n  const charts = await Transaction.aggregate([{\n    $match: {\n      timestamp: {\n        $gte: new Date().getTime() / 1000 - 10 * 24 * 60 * 60\n      }\n    }\n  }, {\n    $group: {\n      _id: {\n        year: {\n          $year: {\n            $add: [new Date(0), {\n              $multiply: [1000, '$timestamp']\n            }]\n          }\n        },\n        mmonth: {\n          $month: {\n            $add: [new Date(0), {\n              $multiply: [1000, '$timestamp']\n            }]\n          }\n        },\n        day: {\n          $dayOfMonth: {\n            $add: [new Date(0), {\n              $multiply: [1000, '$timestamp']\n            }]\n          }\n        }\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  }]);\n  const list = charts.sort((a, b) => {\n    if (a._id.year === b._id.year) {\n      if (a._id.mmonth === b._id.mmonth) {\n        return a._id.day - b._id.day;\n      }\n\n      return a._id.mmonth - b._id.mmonth;\n    }\n\n    return a._id.year - b._id.year;\n  });\n  return list;\n});\nRouter.get('/home/block', async ({\n  url\n}, res) => {\n  const block = await Block.find({}).lean(true).sort({\n    number: -1\n  }).limit(10);\n  const blockNumber = block[block.length - 1].number;\n  const results = await Transaction.aggregate([{\n    $match: {\n      blockNumber: {\n        $gte: blockNumber\n      }\n    }\n  }, {\n    $group: {\n      _id: '$blockNumber',\n      count: {\n        $sum: 1\n      }\n    }\n  }]);\n  let txns = {};\n  results.forEach(txn => {\n    txns[txn._id] = txn.count;\n  });\n  block.forEach(doc => {\n    doc.txn = txns[doc.number] || 0;\n  });\n  return filterBlocks(block);\n});\nRouter.get('/home/trade', async ({\n  url\n}, res) => {\n  const results = await Transaction.find({}).lean(true).sort({\n    blockNumber: -1\n  }).limit(10);\n  return results;\n});","map":null,"metadata":{},"sourceType":"module"}