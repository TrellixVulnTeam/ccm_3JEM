{"ast":null,"code":"import Router from './core/router';\nimport { parseQueryString } from '../utils/common';\nimport web3 from './core/monitorWeb3';\nimport mongoose from 'mongoose';\nimport BizError from './core/error';\nconst {\n  Transaction,\n  TokenTransfer,\n  Contract,\n  Block\n} = mongoose.models;\nRouter.get('/trade', async ({\n  url\n}) => {\n  const param = parseQueryString(url);\n  const ps = parseInt(param.ps) || 10;\n  const pn = parseInt(param.pn) || 1;\n  const block = await Transaction.find({}).lean(true).sort({\n    blockNumber: -1\n  }).skip((pn - 1) * ps).limit(ps);\n  const total = await Transaction.find({}).count();\n  return {\n    rows: block,\n    total\n  };\n});\nRouter.get('/trade/hash/{hash}', async ({\n  params\n}) => {\n  let results = await Transaction.findOne({\n    hash: params.hash\n  });\n  const block = await Block.findOne().sort({\n    number: -1\n  }).limit(1);\n\n  if (!results) {\n    throw new BizError('hash Error');\n  }\n\n  results._doc.newBlockNumber = block === null || block === void 0 ? void 0 : block._doc.number;\n  const contract = await Contract.findOne({\n    address: results === null || results === void 0 ? void 0 : results._doc.to\n  });\n  results._doc.statusV = '0x37';\n\n  if (contract) {\n    var _tradeInfo$logs;\n\n    results._doc.statusV = '0x38';\n    const tokenTransfer = await TokenTransfer.findOne({\n      hash: params.hash\n    });\n    results._doc.realAddress = tokenTransfer === null || tokenTransfer === void 0 ? void 0 : tokenTransfer._doc.to;\n    const contract = await Contract.findOne({\n      address: results === null || results === void 0 ? void 0 : results._doc.to\n    });\n    results._doc.symbol = contract === null || contract === void 0 ? void 0 : contract._doc.symbol;\n    results._doc.decimals = contract === null || contract === void 0 ? void 0 : contract._doc.decimals;\n    const tradeInfo = await web3.eth.getTransactionReceipt(params.hash);\n    results._doc.isSuccess = !!(tradeInfo === null || tradeInfo === void 0 ? void 0 : (_tradeInfo$logs = tradeInfo.logs) === null || _tradeInfo$logs === void 0 ? void 0 : _tradeInfo$logs.length);\n  }\n\n  return results;\n});\nRouter.get('/trade/addr/{hash}', async ({\n  params\n}) => {\n  let results = await Transaction.findOne({\n    hash: params.hash\n  });\n\n  if ((results === null || results === void 0 ? void 0 : results._doc.v) === '0x38') {\n    const tokenTransfer = await TokenTransfer.findOne({\n      hash: params.hash\n    });\n    results._doc.realAddress = tokenTransfer === null || tokenTransfer === void 0 ? void 0 : tokenTransfer._doc.to;\n  }\n\n  return results;\n});\nRouter.get('/trade/number/{number}', async ({\n  params,\n  url\n}) => {\n  const param = parseQueryString(url);\n  const ps = parseInt(param.ps) || 10;\n  const pn = parseInt(param.pn) || 1;\n  const rows = await Transaction.find({\n    blockNumber: params.number\n  }).lean(true).sort({\n    blockNumber: -1\n  }).skip((pn - 1) * ps).limit(ps);\n  const total = await Transaction.find({\n    blockNumber: params.number\n  }).count();\n  return {\n    rows,\n    total\n  };\n});","map":null,"metadata":{},"sourceType":"module"}