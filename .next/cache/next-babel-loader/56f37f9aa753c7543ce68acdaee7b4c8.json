{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport unfetch from 'isomorphic-unfetch';\nimport { getCookies } from './cookie';\nimport { dateid } from '../utils/date';\nconst errorTip = _message;\nexport const fetch = (url, ctx, params = {}) => {\n  if (!url.startsWith('http')) {\n    url = `http://localhost:${process.cfg.server.port}${url}`;\n  }\n\n  return unfetch(url, params).then(response => {\n    if (response.ok) {\n      return response.text().then(jsonIt);\n    }\n\n    throw {\n      status: response.status,\n      response\n    };\n  }).catch(err => {\n    const {\n      status\n    } = err;\n    console.error(`request api ${url} status：${status} error：`, err);\n\n    if (status === 401) {\n      ctx.res.writeHead(302, {\n        Location: '/login'\n      });\n    } else {\n      ctx.res.writeHead(status !== null && status !== void 0 ? status : 500);\n    }\n\n    ctx.res.end();\n  });\n};\n\nconst mkops = (method, data) => {\n  let payload = {\n    method,\n    headers: {}\n  };\n\n  if (method !== 'GET') {\n    payload.headers['Content-Type'] = 'application/json; charset=utf-8';\n\n    if (method !== 'DELETE') {\n      payload.body = JSON.stringify(data || {});\n    }\n  }\n\n  return payload;\n};\n\nconst jsonIt = d => {\n  try {\n    return JSON.parse(d);\n  } catch (e) {\n    return {\n      code: 600,\n      message: e.message,\n      text: d\n    };\n  }\n};\n\nconst send = (url, options, success, error) => {\n  return unfetch(url, options).then(async response => {\n    if (response.ok) {\n      const data = await response.text().then(jsonIt);\n      success === null || success === void 0 ? void 0 : success(data);\n      return Promise.resolve(data);\n    } else {\n      const data = await response.text().then(jsonIt);\n\n      if (data.code === 600) {\n        throw {\n          code: response.status,\n          message: response.statusText,\n          date: dateid()\n        };\n      } else {\n        throw data;\n      }\n    }\n  }).catch(async err => {\n    console.log(err);\n    const {\n      date,\n      code,\n      message\n    } = err;\n\n    if (error) {\n      error(err);\n      return;\n    }\n\n    if (code == 400) {\n      errorTip.error(message);\n    } else if (code === 401) {\n      location.href = '/login';\n    } else if (code == 500) {\n      errorTip.error(`${date}.${code} Server Error`);\n    } else if ((code / 100 | 0) == 5) {\n      errorTip.error('Server Error');\n    } else if (code) {\n      errorTip.error(`${date}.${code} Server Error`);\n    } else {\n      errorTip.error(`${dateid()}.604 Server Error`);\n    }\n  });\n};\n\nexport default {\n  get: (url, success, error) => {\n    return send(url, mkops('GET'), success, error);\n  },\n  post: (url, data, success, error) => {\n    return send(url, mkops('POST', data), success, error);\n  },\n  patch: (url, data, success, error) => {\n    return send(url, mkops('PATCH', data), success, error);\n  },\n  put: (url, data, success, error) => {\n    return send(url, mkops('PUT', data), success, error);\n  },\n  delete: (url, success, error) => {\n    return send(url, mkops('DELETE'), success, error);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}