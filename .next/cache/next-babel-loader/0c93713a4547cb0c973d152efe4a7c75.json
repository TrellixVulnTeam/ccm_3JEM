{"ast":null,"code":"import Router from './core/router';\nimport { parseQueryString, handleAllTrade } from '../utils/common';\nimport mongoose from 'mongoose';\nconst {\n  Contract,\n  TokenTransfer,\n  Transaction\n} = mongoose.models;\nRouter.get('/receiver/info/{addr}', async ({\n  params\n}) => {\n  const contract = await Contract.findOne({\n    address: params.addr\n  });\n  return contract;\n});\nRouter.get('/receiver/list/{addr}', async ({\n  params,\n  url\n}) => {\n  const paramQuery = parseQueryString(url);\n  const ps = parseInt(paramQuery.ps) || 10;\n  const pn = parseInt(paramQuery.pn) || 1;\n  const total = await Transaction.find(handleAllTrade(paramQuery.trade, params.addr)).count();\n  let tokenTransfer = await Transaction.find(handleAllTrade(paramQuery.trade, params.addr)).sort({\n    blockNumber: -1\n  }).skip((pn - 1) * ps).limit(ps);\n  const list = await Promise.all(tokenTransfer.map(async item => {\n    return await Contract.findOne({\n      address: item.to\n    });\n  }));\n  tokenTransfer.forEach(item => {\n    const contract = list.find(li => item.to.toUpperCase() === li.address.toUpperCase());\n    item._doc.symbol = contract.symbol;\n    item._doc.decimals = contract.decimals;\n  });\n  return {\n    total,\n    rows: tokenTransfer\n  };\n});","map":{"version":3,"sources":["/Users/libaozhong/cr/ccm-front/api/receiver.js"],"names":["Router","parseQueryString","handleAllTrade","mongoose","Contract","TokenTransfer","Transaction","models","get","params","contract","findOne","address","addr","url","paramQuery","ps","parseInt","pn","total","find","trade","count","tokenTransfer","sort","blockNumber","skip","limit","list","Promise","all","map","item","to","forEach","li","toUpperCase","_doc","symbol","decimals","rows"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,iBAAjD;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,MAAM;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,aAAZ;AAA2BC,EAAAA;AAA3B,IAA2CH,QAAQ,CAACI,MAA1D;AAEAP,MAAM,CAACQ,GAAP,CAAW,uBAAX,EAAoC,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AACxD,QAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,OAAT,CAAiB;AAAEC,IAAAA,OAAO,EAAEH,MAAM,CAACI;AAAlB,GAAjB,CAAvB;AACA,SAAOH,QAAP;AACD,CAHD;AAKAV,MAAM,CAACQ,GAAP,CAAW,uBAAX,EAAoC,OAAO;AAAEC,EAAAA,MAAF;AAAUK,EAAAA;AAAV,CAAP,KAA2B;AAC7D,QAAMC,UAAU,GAAGd,gBAAgB,CAACa,GAAD,CAAnC;AACA,QAAME,EAAE,GAAGC,QAAQ,CAACF,UAAU,CAACC,EAAZ,CAAR,IAA2B,EAAtC;AACA,QAAME,EAAE,GAAGD,QAAQ,CAACF,UAAU,CAACG,EAAZ,CAAR,IAA2B,CAAtC;AAEA,QAAMC,KAAK,GAAG,MAAMb,WAAW,CAACc,IAAZ,CAAiBlB,cAAc,CAACa,UAAU,CAACM,KAAZ,EAAmBZ,MAAM,CAACI,IAA1B,CAA/B,EAAgES,KAAhE,EAApB;AACA,MAAIC,aAAa,GAAG,MAAMjB,WAAW,CAACc,IAAZ,CAAiBlB,cAAc,CAACa,UAAU,CAACM,KAAZ,EAAmBZ,MAAM,CAACI,IAA1B,CAA/B,EACvBW,IADuB,CAClB;AAAEC,IAAAA,WAAW,EAAE,CAAC;AAAhB,GADkB,EAEvBC,IAFuB,CAElB,CAACR,EAAE,GAAG,CAAN,IAAWF,EAFO,EAGvBW,KAHuB,CAGjBX,EAHiB,CAA1B;AAIA,QAAMY,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CACjBP,aAAa,CAACQ,GAAd,CAAkB,MAAOC,IAAP,IAAgB;AAChC,WAAO,MAAM5B,QAAQ,CAACO,OAAT,CAAiB;AAAEC,MAAAA,OAAO,EAAEoB,IAAI,CAACC;AAAhB,KAAjB,CAAb;AACD,GAFD,CADiB,CAAnB;AAKAV,EAAAA,aAAa,CAACW,OAAd,CAAuBF,IAAD,IAAU;AAC9B,UAAMtB,QAAQ,GAAGkB,IAAI,CAACR,IAAL,CAAWe,EAAD,IAAQH,IAAI,CAACC,EAAL,CAAQG,WAAR,OAA0BD,EAAE,CAACvB,OAAH,CAAWwB,WAAX,EAA5C,CAAjB;AACAJ,IAAAA,IAAI,CAACK,IAAL,CAAUC,MAAV,GAAmB5B,QAAQ,CAAC4B,MAA5B;AACAN,IAAAA,IAAI,CAACK,IAAL,CAAUE,QAAV,GAAqB7B,QAAQ,CAAC6B,QAA9B;AACD,GAJD;AAKA,SAAO;AAAEpB,IAAAA,KAAF;AAASqB,IAAAA,IAAI,EAAEjB;AAAf,GAAP;AACD,CArBD","sourcesContent":["import Router from './core/router'\nimport { parseQueryString, handleAllTrade } from '../utils/common'\nimport mongoose from 'mongoose'\nconst { Contract, TokenTransfer, Transaction } = mongoose.models\n\nRouter.get('/receiver/info/{addr}', async ({ params }) => {\n  const contract = await Contract.findOne({ address: params.addr })\n  return contract\n})\n\nRouter.get('/receiver/list/{addr}', async ({ params, url }) => {\n  const paramQuery = parseQueryString(url)\n  const ps = parseInt(paramQuery.ps) || 10\n  const pn = parseInt(paramQuery.pn) || 1\n\n  const total = await Transaction.find(handleAllTrade(paramQuery.trade, params.addr)).count()\n  let tokenTransfer = await Transaction.find(handleAllTrade(paramQuery.trade, params.addr))\n    .sort({ blockNumber: -1 })\n    .skip((pn - 1) * ps)\n    .limit(ps)\n  const list = await Promise.all(\n    tokenTransfer.map(async (item) => {\n      return await Contract.findOne({ address: item.to })\n    })\n  )\n  tokenTransfer.forEach((item) => {\n    const contract = list.find((li) => item.to.toUpperCase() === li.address.toUpperCase())\n    item._doc.symbol = contract.symbol\n    item._doc.decimals = contract.decimals\n  })\n  return { total, rows: tokenTransfer }\n})\n"]},"metadata":{},"sourceType":"module"}