{"ast":null,"code":"import Router from './core/router';\nimport mongoose from 'mongoose';\nimport { parseQueryString, handleAllTrade } from '../utils/common';\nconst {\n  Transaction,\n  Account,\n  Contract,\n  TokenTransfer,\n  Block\n} = mongoose.models;\nRouter.get('/addr/info/{addr}', async ({\n  params\n}) => {\n  const account = await Account.findOne({\n    address: params.addr\n  });\n  const transaction = await Transaction.find(handleAllTrade('all', params.addr)).count();\n  const tokenTransfer = await TokenTransfer.aggregate([{\n    $match: {\n      $or: [{\n        from: params.addr\n      }, {\n        to: params.addr\n      }]\n    }\n  }, {\n    $group: {\n      _id: '$contract'\n    }\n  }]);\n  let token = await Promise.all(tokenTransfer.map(async item => {\n    return await Contract.findOne({\n      address: item._id\n    });\n  }));\n  let list = [];\n  token.forEach(item => {\n    item && list.push(item);\n  });\n  return {\n    token: list,\n    balance: account === null || account === void 0 ? void 0 : account._doc.balance,\n    tradeNumber: transaction\n  };\n});\nRouter.get('/addr/info/trade/{addr}', async ({\n  params,\n  url\n}) => {\n  const paramQuery = parseQueryString(url);\n  const ps = parseInt(paramQuery.ps) || 10;\n  const pn = parseInt(paramQuery.pn) || 1;\n  const rows = await Transaction.find(handleAllTrade(paramQuery.trade, params.addr)).sort({\n    blockNumber: -1\n  }).skip((pn - 1) * ps).limit(ps);\n  const total = await Transaction.find(handleAllTrade(paramQuery.trade, params.addr)).count();\n  return {\n    rows,\n    total\n  };\n});\nRouter.get('/addr/info/tokenTrade/{addr}', async ({\n  params,\n  url\n}) => {\n  const paramQuery = parseQueryString(url);\n  const ps = parseInt(paramQuery.ps) || 10;\n  const pn = parseInt(paramQuery.pn) || 1;\n  let tokenTransfer = await Transaction.find({\n    $or: [{\n      from: params.addr\n    }, {\n      addr: params.addr\n    }],\n    $and: [{\n      value: '0'\n    }, {\n      to: {\n        $exists: true\n      }\n    }]\n  }).lean(true).sort({\n    blockNumber: -1\n  }).skip((pn - 1) * ps).limit(ps);\n  const list = await Promise.all(tokenTransfer.map(async item => {\n    return await Contract.findOne({\n      address: item.to\n    });\n  }));\n  tokenTransfer.forEach(item => {\n    const contract = list.find(li => item.to.toUpperCase() === li.address.toUpperCase());\n    item.symbol = contract.symbol;\n    item.decimals = contract.decimals;\n  });\n  const total = await Transaction.find({\n    $or: [{\n      from: params.addr\n    }, {\n      addr: params.addr\n    }],\n    $and: [{\n      value: '0'\n    }]\n  }).count();\n  return {\n    rows: tokenTransfer,\n    total\n  };\n});","map":{"version":3,"sources":["/Users/libaozhong/cr/ccm-front/api/addr.js"],"names":["Router","mongoose","parseQueryString","handleAllTrade","Transaction","Account","Contract","TokenTransfer","Block","models","get","params","account","findOne","address","addr","transaction","find","count","tokenTransfer","aggregate","$match","$or","from","to","$group","_id","token","Promise","all","map","item","list","forEach","push","balance","_doc","tradeNumber","url","paramQuery","ps","parseInt","pn","rows","trade","sort","blockNumber","skip","limit","total","$and","value","$exists","lean","contract","li","toUpperCase","symbol","decimals"],"mappings":"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","sourcesContent":["import Router from './core/router'\nimport mongoose from 'mongoose'\nimport { parseQueryString, handleAllTrade } from '../utils/common'\n\nconst { Transaction, Account, Contract, TokenTransfer, Block } = mongoose.models\n\nRouter.get('/addr/info/{addr}', async ({ params }) => {\n  const account = await Account.findOne({ address: params.addr })\n  const transaction = await Transaction.find(handleAllTrade('all', params.addr)).count()\n  const tokenTransfer = await TokenTransfer.aggregate([{ $match: { $or: [{ from: params.addr }, { to: params.addr }] } }, { $group: { _id: '$contract' } }])\n  let token = await Promise.all(\n    tokenTransfer.map(async (item) => {\n      return await Contract.findOne({ address: item._id })\n    })\n  )\n  let list = []\n  token.forEach((item) => {\n    item && list.push(item)\n  })\n  return {\n    token: list,\n    balance: account?._doc.balance,\n    tradeNumber: transaction\n  }\n})\n\nRouter.get('/addr/info/trade/{addr}', async ({ params, url }) => {\n  const paramQuery = parseQueryString(url)\n  const ps = parseInt(paramQuery.ps) || 10\n  const pn = parseInt(paramQuery.pn) || 1\n  const rows = await Transaction.find(handleAllTrade(paramQuery.trade, params.addr))\n    .sort({ blockNumber: -1 })\n    .skip((pn - 1) * ps)\n    .limit(ps)\n  const total = await Transaction.find(handleAllTrade(paramQuery.trade, params.addr)).count()\n  return { rows, total }\n})\n\nRouter.get('/addr/info/tokenTrade/{addr}', async ({ params, url }) => {\n  const paramQuery = parseQueryString(url)\n  const ps = parseInt(paramQuery.ps) || 10\n  const pn = parseInt(paramQuery.pn) || 1\n  let tokenTransfer = await Transaction.find({ $or: [{ from: params.addr }, { addr: params.addr }], $and: [{ value: '0' }, { to: { $exists: true } }] })\n    .lean(true)\n    .sort({ blockNumber: -1 })\n    .skip((pn - 1) * ps)\n    .limit(ps)\n  const list = await Promise.all(\n    tokenTransfer.map(async (item) => {\n      return await Contract.findOne({ address: item.to })\n    })\n  )\n  tokenTransfer.forEach((item) => {\n    const contract = list.find((li) => item.to.toUpperCase() === li.address.toUpperCase())\n    item.symbol = contract.symbol\n    item.decimals = contract.decimals\n  })\n  const total = await Transaction.find({ $or: [{ from: params.addr }, { addr: params.addr }], $and: [{ value: '0' }] }).count()\n  return { rows: tokenTransfer, total }\n})\n"]},"metadata":{},"sourceType":"module"}