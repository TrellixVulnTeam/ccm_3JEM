{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport unfetch from 'isomorphic-unfetch';\nimport { getCookies } from './cookie';\nimport { dateid } from '../utils/date';\nconst errorTip = _message;\nexport const fetch = (url, ctx, params = {}) => {\n  if (!url.startsWith('http')) {\n    url = `http://localhost:${process.cfg.server.port}${url}`;\n  }\n\n  return unfetch(url, params).then(response => {\n    if (response.ok) {\n      return response.text().then(jsonIt);\n    }\n\n    throw {\n      status: response.status,\n      response\n    };\n  }).catch(err => {\n    const {\n      status\n    } = err;\n    console.error(`request api ${url} status：${status} error：`, err);\n\n    if (status === 401) {\n      ctx.res.writeHead(302, {\n        Location: '/login'\n      });\n    } else {\n      ctx.res.writeHead(status !== null && status !== void 0 ? status : 500);\n    }\n\n    ctx.res.end();\n  });\n};\n\nconst mkops = (method, data) => {\n  let payload = {\n    method,\n    headers: {}\n  };\n\n  if (method !== 'GET') {\n    payload.headers['Content-Type'] = 'application/json; charset=utf-8';\n\n    if (method !== 'DELETE') {\n      payload.body = JSON.stringify(data || {});\n    }\n  }\n\n  return payload;\n};\n\nconst jsonIt = d => {\n  try {\n    return JSON.parse(d);\n  } catch (e) {\n    return {\n      code: 600,\n      message: e.message,\n      text: d\n    };\n  }\n};\n\nconst send = (url, options, success, error) => {\n  return unfetch(url, options).then(async response => {\n    if (response.ok) {\n      const data = await response.text().then(jsonIt);\n      success === null || success === void 0 ? void 0 : success(data);\n      return Promise.resolve(data);\n    } else {\n      const data = await response.text().then(jsonIt);\n\n      if (data.code === 600) {\n        throw {\n          code: response.status,\n          message: response.statusText,\n          date: dateid()\n        };\n      } else {\n        throw data;\n      }\n    }\n  }).catch(async err => {\n    console.log(err);\n    const {\n      date,\n      code,\n      message\n    } = err;\n\n    if (error) {\n      error(err);\n      return;\n    }\n\n    if (code == 400) {\n      errorTip.error(message);\n    } else if (code === 401) {\n      location.href = '/login';\n    } else if (code == 500) {\n      errorTip.error(`${date}.${code} Server Error`);\n    } else if ((code / 100 | 0) == 5) {\n      errorTip.error('Server Error');\n    } else if (code) {\n      errorTip.error(`${date}.${code} Server Error`);\n    } else {\n      errorTip.error(`${dateid()}.604 Server Error`);\n    }\n  });\n};\n\nexport default {\n  get: (url, success, error) => {\n    return send(url, mkops('GET'), success, error);\n  },\n  post: (url, data, success, error) => {\n    return send(url, mkops('POST', data), success, error);\n  },\n  patch: (url, data, success, error) => {\n    return send(url, mkops('PATCH', data), success, error);\n  },\n  put: (url, data, success, error) => {\n    return send(url, mkops('PUT', data), success, error);\n  },\n  delete: (url, success, error) => {\n    return send(url, mkops('DELETE'), success, error);\n  }\n};","map":{"version":3,"sources":["/Users/libaozhong/cr/ccm-front/utils/http.js"],"names":["unfetch","getCookies","dateid","errorTip","fetch","url","ctx","params","startsWith","process","cfg","server","port","then","response","ok","text","jsonIt","status","catch","err","console","error","res","writeHead","Location","end","mkops","method","data","payload","headers","body","JSON","stringify","d","parse","e","code","message","send","options","success","Promise","resolve","statusText","date","log","location","href","get","post","patch","put","delete"],"mappings":"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","sourcesContent":["import unfetch from 'isomorphic-unfetch'\nimport { getCookies } from './cookie'\nimport { dateid } from '../utils/date'\nimport { message } from 'antd'\n\nconst errorTip = message\n\nexport const fetch = (url, ctx, params = {}) => {\n  if (!url.startsWith('http')) {\n    url = `http://localhost:${process.cfg.server.port}${url}`\n  }\n\n  return unfetch(url, params)\n    .then((response) => {\n      if (response.ok) {\n        return response.text().then(jsonIt)\n      }\n      throw { status: response.status, response }\n    })\n    .catch((err) => {\n      const { status } = err\n      console.error(`request api ${url} status：${status} error：`, err)\n      if (status === 401) {\n        ctx.res.writeHead(302, { Location: '/login' })\n      } else {\n        ctx.res.writeHead(status ?? 500)\n      }\n      ctx.res.end()\n    })\n}\n\nconst mkops = (method, data) => {\n  let payload = {\n    method,\n    headers: {}\n  }\n  if (method !== 'GET') {\n    payload.headers['Content-Type'] = 'application/json; charset=utf-8'\n    if (method !== 'DELETE') {\n      payload.body = JSON.stringify(data || {})\n    }\n  }\n  return payload\n}\n\nconst jsonIt = (d) => {\n  try {\n    return JSON.parse(d)\n  } catch (e) {\n    return { code: 600, message: e.message, text: d }\n  }\n}\n\nconst send = (url, options, success, error) => {\n  return unfetch(url, options)\n    .then(async (response) => {\n      if (response.ok) {\n        const data = await response.text().then(jsonIt)\n        success?.(data)\n        return Promise.resolve(data)\n      } else {\n        const data = await response.text().then(jsonIt)\n        if (data.code === 600) {\n          throw {\n            code: response.status,\n            message: response.statusText,\n            date: dateid()\n          }\n        } else {\n          throw data\n        }\n      }\n    })\n    .catch(async (err) => {\n      console.log(err)\n      const { date, code, message } = err\n      if (error) {\n        error(err)\n        return\n      }\n      if (code == 400) {\n        errorTip.error(message)\n      } else if (code === 401) {\n        location.href = '/login'\n      } else if (code == 500) {\n        errorTip.error(`${date}.${code} Server Error`)\n      } else if (((code / 100) | 0) == 5) {\n        errorTip.error('Server Error')\n      } else if (code) {\n        errorTip.error(`${date}.${code} Server Error`)\n      } else {\n        errorTip.error(`${dateid()}.604 Server Error`)\n      }\n    })\n}\n\nexport default {\n  get: (url, success, error) => {\n    return send(url, mkops('GET'), success, error)\n  },\n  post: (url, data, success, error) => {\n    return send(url, mkops('POST', data), success, error)\n  },\n  patch: (url, data, success, error) => {\n    return send(url, mkops('PATCH', data), success, error)\n  },\n  put: (url, data, success, error) => {\n    return send(url, mkops('PUT', data), success, error)\n  },\n  delete: (url, success, error) => {\n    return send(url, mkops('DELETE'), success, error)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}