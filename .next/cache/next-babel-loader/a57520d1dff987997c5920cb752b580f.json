{"ast":null,"code":"import \"antd/lib/tabs/style\";\nimport _Tabs from \"antd/lib/tabs\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect, useContext } from 'react';\nimport Styled from 'styled-components';\nimport Layout from '../../components/layout';\nimport Grid from '../../components/table/Grid';\nimport { injectIntl } from 'react-intl';\nimport Router, { withRouter } from 'next/router';\nimport http from '../../utils/http';\nimport { getDuration } from '../../utils/date';\nimport { handleGetFee, formatDataNumber } from '../../utils/common';\nimport Link from 'next/link';\nimport { MyContext } from '../../reducer';\nimport BigNumber from 'bignumber.js';\nconst RsTabs = injectIntl(({\n  intl,\n  type,\n  url,\n  id\n}) => {\n  const {\n    0: tradeKey,\n    1: setTradeKey\n  } = useState('all');\n  let columns = [{\n    title: intl.messages.lang23,\n    dataIndex: 'hash',\n    ellipsis: true,\n    render: (text, row) => __jsx(Link, {\n      href: `/hash/${row.hash}`,\n      as: `/hash/${row.hash}`\n    }, __jsx(\"a\", {\n      className: \"a_block\"\n    }, text))\n  }, {\n    title: intl.messages.lang19,\n    width: 100,\n    dataIndex: 'blockNumber',\n    render: (text, row) => __jsx(Link, {\n      href: `/block/${text}`,\n      as: `/block/${text}`\n    }, __jsx(\"a\", {\n      className: \"a_block\"\n    }, text))\n  }, {\n    title: intl.messages.lang21,\n    ellipsis: true,\n    h5: true,\n    dataIndex: 'timestamp',\n    render: text => getDuration(text, intl.locale, 3).toString()\n  }, {\n    title: intl.messages.lang24,\n    ellipsis: true,\n    h5: true,\n    dataIndex: 'from',\n    render: (text, data) => {\n      return text === id ? text : __jsx(Link, {\n        href: `/addr/${text}`,\n        as: `/addr/${text}`\n      }, __jsx(\"a\", {\n        className: \"a_block\"\n      }, text));\n    }\n  }, {\n    title: intl.messages.lang25,\n    ellipsis: true,\n    dataIndex: 'to',\n    h5: true,\n    render: (text, data) => handleRturnTo(text, data)\n  }];\n\n  if (type === 'trade') {\n    columns = columns.concat([{\n      title: intl.messages.lang26,\n      ellipsis: true,\n      width: 120,\n      dataIndex: 'value',\n      render: text => text + ' CCM'\n    }, {\n      title: intl.messages.lang27,\n      dataIndex: 'a7',\n      h5: true,\n      render: (text, data) => handleGetFee(data.gasUsed * data.gasPrice, 18)\n    }]);\n  } else {\n    columns = columns.concat([{\n      title: intl.messages.lang54,\n      ellipsis: true,\n      dataIndex: 'a8',\n      width: 120,\n      h5: true,\n      render: (text, data) => data.decimals !== undefined ? handleGetFee(new BigNumber(Number(`0x${data.input.substring(114)}`)).toFixed(), data.decimals) : ''\n    }, {\n      title: intl.messages.lang26,\n      ellipsis: true,\n      dataIndex: 'a9',\n      render: (text, data) => data.decimals !== undefined ? `${handleGetFee(new BigNumber(Number(`0x${data.input.substring(114)}`)).toFixed(), data.decimals)} (${data.symbol})` : ''\n    }]);\n  }\n\n  const handleRturnTo = (text, data) => {\n    if (text) {\n      if (text !== id && data.value === '0') {\n        var _data$from;\n\n        return __jsx(Link, {\n          href: `/receiver/${text}`,\n          as: `/receiver/${text}`\n        }, __jsx(\"a\", {\n          className: \"a_block\"\n        }, __jsx(\"span\", {\n          className: ((_data$from = data.from) === null || _data$from === void 0 ? void 0 : _data$from.toLocaleLowerCase()) === id.toLocaleLowerCase() ? 'out' : 'in'\n        }, data.from.toLocaleLowerCase() === id.toLocaleLowerCase() ? 'OUT' : 'IN'), text));\n      } else {\n        var _data$from2;\n\n        return __jsx(\"span\", {\n          className: \"a_block default\"\n        }, __jsx(\"span\", {\n          className: ((_data$from2 = data.from) === null || _data$from2 === void 0 ? void 0 : _data$from2.toLocaleLowerCase()) === id.toLocaleLowerCase() ? 'out' : 'in'\n        }, data.from.toLocaleLowerCase() === id.toLocaleLowerCase() ? 'OUT' : 'IN'), text);\n      }\n    } else {\n      return intl.messages.lang58;\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"rs-addr-tab\"\n  }, type === 'trade' && __jsx(\"div\", {\n    className: \"rs-addr-select\"\n  }, __jsx(_Select, {\n    defaultValue: tradeKey,\n    style: {\n      width: 200\n    },\n    size: \"small\",\n    onChange: val => setTradeKey(val)\n  }, __jsx(_Select.Option, {\n    value: \"all\"\n  }, intl.messages.lang9), __jsx(_Select.Option, {\n    value: \"in\"\n  }, intl.messages.lang42), __jsx(_Select.Option, {\n    value: \"out\"\n  }, intl.messages.lang41))), __jsx(Grid, {\n    scroll: {\n      y: 1000\n    },\n    otherParam: `&trade=${tradeKey}`,\n    url: url,\n    columns: columns\n  }));\n});\nconst Addr = injectIntl(({\n  intl,\n  router\n}) => {\n  var _addr$token;\n\n  const {\n    state\n  } = useContext(MyContext);\n  const id = router.query.id;\n  const {\n    0: addr,\n    1: setAddr\n  } = useState({});\n  const {\n    0: isFirst,\n    1: setIsFirst\n  } = useState(true);\n  useEffect(() => {\n    http.get(`/api/addr/info/${id}`, data => {\n      setAddr(data);\n    });\n  }, []);\n  useEffect(() => {\n    if ((addr === null || addr === void 0 ? void 0 : addr.token) && isFirst) {\n      setIsFirst(false);\n      addr.token.forEach((item, index) => {\n        http.get(`/api/addr/token/balance?address=${id}&contractaddress=${item.address}&decimals=${item.decimals}`).then(data => {\n          addr.token[index].balance = new BigNumber(data || 0).toFixed();\n          setAddr(_objectSpread({}, addr));\n        });\n      });\n    }\n  }, [addr, isFirst]);\n\n  const handleChange = val => {\n    Router.push(`/receiver/${val}`);\n  };\n\n  return __jsx(Layout, null, __jsx(Box, {\n    state: state\n  }, __jsx(\"div\", {\n    className: \"rs-addr-title\"\n  }, __jsx(\"span\", null, intl.messages.lang35), id), __jsx(\"div\", {\n    className: \"rs-addr-info\"\n  }, __jsx(\"div\", {\n    className: \"title\"\n  }, intl.messages.lang36), __jsx(\"div\", {\n    className: \"rs-addr-info-details\"\n  }, __jsx(\"em\", null, intl.messages.lang37), __jsx(\"div\", null, formatDataNumber(addr.balance || '0'))), __jsx(\"div\", {\n    className: \"rs-addr-info-details\"\n  }, __jsx(\"em\", null, intl.messages.lang32), __jsx(\"div\", null, addr.tradeNumber)), __jsx(\"div\", {\n    className: \"rs-addr-info-details\"\n  }, __jsx(\"em\", null, intl.messages.lang57), __jsx(\"div\", {\n    className: \"rs-addr-select-cont\"\n  }, __jsx(_Select, {\n    showSearch: true,\n    filterOption: (input, option) => option.value.toLowerCase().indexOf(input.toLowerCase()) >= 0 || option.symbol.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n    placeholder: intl.messages.lang39,\n    style: {\n      width: '100%'\n    },\n    onChange: val => handleChange(val)\n  }, (_addr$token = addr.token) === null || _addr$token === void 0 ? void 0 : _addr$token.map((item, index) => __jsx(_Select.Option, {\n    value: item.address,\n    key: item.address,\n    symbol: item.symbol\n  }, __jsx(\"div\", {\n    className: \"rs-addr-select-token\"\n  }, __jsx(\"span\", {\n    className: \"an\"\n  }, item.address), __jsx(\"span\", null, item.symbol)), __jsx(\"div\", {\n    className: \"rs-addr-select-token\"\n  }, __jsx(\"span\", {\n    className: \"an\"\n  }, intl.messages.lang38), __jsx(\"span\", null, formatDataNumber(item.balance || '0'))))))))), __jsx(AddrTab, null, __jsx(_Tabs, {\n    defaultActiveKey: \"1\",\n    type: \"card\"\n  }, __jsx(_Tabs.TabPane, {\n    tab: intl.messages.lang6,\n    key: \"1\"\n  }, __jsx(RsTabs, {\n    type: \"trade\",\n    url: `/api/addr/info/trade/${id}`,\n    id: id\n  })), __jsx(_Tabs.TabPane, {\n    tab: intl.messages.lang40,\n    key: \"2\"\n  }, __jsx(RsTabs, {\n    type: \"coinCode\",\n    url: `/api/addr/info/tokenTrade/${id}`,\n    id: id\n  }))))));\n});\nconst Box = Styled.div.withConfig({\n  displayName: \"id__Box\",\n  componentId: \"sc-16ra7ik-0\"\n})([\".rs-addr-title{height:45px;line-height:45px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;border-radius:4px;background:#fff;padding:0 10px;span{margin-right:10px;font-weight:600;}}.rs-addr-info{margin-top:20px;background:#fff;padding:0 10px;border-radius:4px;.title{height:45px;line-height:45px;font-weight:600;border-bottom:1px solid #eee;}.rs-addr-info-details{display:flex;align-items:center;height:40px;border-bottom:1px solid #eee;em{width:\", \";padding-right:\", \";}>div{flex:1;}}.rs-addr-select-cont{width:100%;}}\"], props => props.state.window > 1199 ? '150px' : '', props => props.state.window > 1199 ? '0' : '10px');\nconst AddrTab = Styled.div.withConfig({\n  displayName: \"id__AddrTab\",\n  componentId: \"sc-16ra7ik-1\"\n})([\"margin-top:20px;background:#fff;.rs-addr-tab{.rs-addr-select{background:rgba(250,250,250,0.5);height:40px;display:flex;align-items:center;justify-content:flex-end;padding:0 20px;border-bottom:1px solid #eee;}}\"]);\nexport default withRouter(Addr);","map":null,"metadata":{},"sourceType":"module"}