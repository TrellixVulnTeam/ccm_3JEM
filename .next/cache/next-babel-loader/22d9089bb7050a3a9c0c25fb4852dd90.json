{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { RouterNotFoundError } from './error';\nexport default class Router {\n  static get(url, func) {\n    this.routerMap['GET'][url] = func;\n  }\n\n  static post(url, func) {\n    this.routerMap['POST'][url] = func;\n  }\n\n  static put(url, func) {\n    this.routerMap['PUT'][url] = func;\n  }\n\n  static patch(url, func) {\n    this.routerMap['PATCH'][url] = func;\n  }\n\n  static delete(url, func) {\n    this.routerMap['DELETE'][url] = func;\n  }\n\n}\n\n_defineProperty(Router, \"routerMap\", {\n  GET: {},\n  POST: {},\n  PUT: {},\n  PATCH: {},\n  DELETE: {}\n});\n\nexport const dispatchRequest = async (req, res) => {\n  const handleRouter = matchingRouter(req);\n\n  if (handleRouter) {\n    return await handleRouter(req, res);\n  }\n\n  throw new RouterNotFoundError('404 not found');\n};\n\nconst matchingRouter = req => {\n  const pathname = req.pathname.substring(4);\n  req.params = {}; //处理该类型请求的路由\n\n  const handleReqRouters = Router.routerMap[req.method];\n\n  if (handleReqRouters) {\n    const allRouterMethodName = Object.keys(handleReqRouters);\n    const reqPathArr = pathname.split('/').filter(s => s !== '');\n    const handleMethodName = allRouterMethodName.find(k => {\n      const routerPathArr = k.split('/').filter(s => s !== '');\n      const length = Math.max(reqPathArr.length, routerPathArr.length);\n\n      for (let i = 0; i < length; i++) {\n        const v1 = routerPathArr[i];\n        const v2 = reqPathArr[i];\n\n        if (v1 === v2) {\n          continue;\n        } else if (v1 && v2 && v1.startsWith('{')) {\n          req.params[v1.substring(1, v1.length - 1)] = v2;\n          continue;\n        }\n\n        return false;\n      }\n\n      return k;\n    });\n    return handleReqRouters[handleMethodName];\n  }\n};","map":{"version":3,"sources":["/Users/libaozhong/cr/ccm-front/api/core/router.js"],"names":["RouterNotFoundError","Router","get","url","func","routerMap","post","put","patch","delete","GET","POST","PUT","PATCH","DELETE","dispatchRequest","req","res","handleRouter","matchingRouter","pathname","substring","params","handleReqRouters","method","allRouterMethodName","Object","keys","reqPathArr","split","filter","s","handleMethodName","find","k","routerPathArr","length","Math","max","i","v1","v2","startsWith"],"mappings":"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","sourcesContent":["import { RouterNotFoundError } from './error'\n\nexport default class Router {\n  static routerMap = {\n    GET: {},\n    POST: {},\n    PUT: {},\n    PATCH: {},\n    DELETE: {}\n  }\n\n  static get(url, func) {\n    this.routerMap['GET'][url] = func\n  }\n\n  static post(url, func) {\n    this.routerMap['POST'][url] = func\n  }\n\n  static put(url, func) {\n    this.routerMap['PUT'][url] = func\n  }\n\n  static patch(url, func) {\n    this.routerMap['PATCH'][url] = func\n  }\n\n  static delete(url, func) {\n    this.routerMap['DELETE'][url] = func\n  }\n}\n\nexport const dispatchRequest = async (req, res) => {\n  const handleRouter = matchingRouter(req)\n  if (handleRouter) {\n    return await handleRouter(req, res)\n  }\n  throw new RouterNotFoundError('404 not found')\n}\n\nconst matchingRouter = (req) => {\n  const pathname = req.pathname.substring(4)\n  req.params = {}\n  //处理该类型请求的路由\n  const handleReqRouters = Router.routerMap[req.method]\n  if (handleReqRouters) {\n    const allRouterMethodName = Object.keys(handleReqRouters)\n    const reqPathArr = pathname.split('/').filter((s) => s !== '')\n    const handleMethodName = allRouterMethodName.find((k) => {\n      const routerPathArr = k.split('/').filter((s) => s !== '')\n      const length = Math.max(reqPathArr.length, routerPathArr.length)\n      for (let i = 0; i < length; i++) {\n        const v1 = routerPathArr[i]\n        const v2 = reqPathArr[i]\n        if (v1 === v2) {\n          continue\n        } else if (v1 && v2 && v1.startsWith('{')) {\n          req.params[v1.substring(1, v1.length - 1)] = v2\n          continue\n        }\n        return false\n      }\n      return k\n    })\n    return handleReqRouters[handleMethodName]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}