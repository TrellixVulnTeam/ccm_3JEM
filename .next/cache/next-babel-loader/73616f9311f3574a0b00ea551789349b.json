{"ast":null,"code":"import Router from './core/router';\nimport { filterBlocks } from '../utils/common';\nimport mongoose from 'mongoose';\nconst {\n  Block,\n  Transaction,\n  TokenTransfer,\n  Market\n} = mongoose.models;\nRouter.get('/home/info', async ({\n  url\n}, res) => {\n  const block = await Block.findOne({}).sort({\n    number: -1\n  }).limit(1);\n  const market = await Market.findOne({});\n  const transactionNumber = await Transaction.find({}).count();\n  const tokenTransfer = await TokenTransfer.find({}).count();\n  const tradeNumber = transactionNumber + tokenTransfer;\n  return {\n    block: block.number,\n    change: market.change,\n    vol: market.vol,\n    last: market.last,\n    tradeNumber\n  };\n});\nRouter.get('/home/charts', async ({\n  url\n}, res) => {\n  const charts = await Transaction.aggregate([{\n    $match: {\n      timestamp: {\n        $gte: new Date().getTime() / 1000 - 10 * 24 * 60 * 60\n      }\n    }\n  }, {\n    $group: {\n      _id: {\n        year: {\n          $year: {\n            $add: [new Date(0), {\n              $multiply: [1000, '$timestamp']\n            }]\n          }\n        },\n        mmonth: {\n          $month: {\n            $add: [new Date(0), {\n              $multiply: [1000, '$timestamp']\n            }]\n          }\n        },\n        day: {\n          $dayOfMonth: {\n            $add: [new Date(0), {\n              $multiply: [1000, '$timestamp']\n            }]\n          }\n        }\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  }]);\n  const list = charts.sort((a, b) => {\n    if (a._id.year === b._id.year) {\n      if (a._id.mmonth === b._id.mmonth) {\n        return a._id.day - b._id.day;\n      }\n\n      return a._id.mmonth - b._id.mmonth;\n    }\n\n    return a._id.year - b._id.year;\n  });\n  return list;\n});\nRouter.get('/home/block', async ({\n  url\n}, res) => {\n  const block = await Block.find({}).lean(true).sort({\n    number: -1\n  }).limit(10);\n  const blockNumber = block[block.length - 1].number;\n  const results = await Transaction.aggregate([{\n    $match: {\n      blockNumber: {\n        $gte: blockNumber\n      }\n    }\n  }, {\n    $group: {\n      _id: '$blockNumber',\n      count: {\n        $sum: 1\n      }\n    }\n  }]);\n  let txns = {};\n  results.forEach(txn => {\n    txns[txn._id] = txn.count;\n  });\n  block.forEach(doc => {\n    doc.txn = txns[doc.number] || 0;\n  });\n  return filterBlocks(block);\n});\nRouter.get('/home/trade', async ({\n  url\n}, res) => {\n  const results = await Transaction.find({}).lean(true).sort({\n    blockNumber: -1\n  }).limit(10);\n  return results;\n});","map":{"version":3,"sources":["/Users/libaozhong/cr/ccm-front/api/home.js"],"names":["Router","filterBlocks","mongoose","Block","Transaction","TokenTransfer","Market","models","get","url","res","block","findOne","sort","number","limit","market","transactionNumber","find","count","tokenTransfer","tradeNumber","change","vol","last","charts","aggregate","$match","timestamp","$gte","Date","getTime","$group","_id","year","$year","$add","$multiply","mmonth","$month","day","$dayOfMonth","$sum","list","a","b","lean","blockNumber","length","results","txns","forEach","txn","doc"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA,WAAT;AAAsBC,EAAAA,aAAtB;AAAqCC,EAAAA;AAArC,IAAgDJ,QAAQ,CAACK,MAA/D;AAEAP,MAAM,CAACQ,GAAP,CAAW,YAAX,EAAyB,OAAO;AAAEC,EAAAA;AAAF,CAAP,EAAgBC,GAAhB,KAAwB;AAC/C,QAAMC,KAAK,GAAG,MAAMR,KAAK,CAACS,OAAN,CAAc,EAAd,EAAkBC,IAAlB,CAAuB;AAAEC,IAAAA,MAAM,EAAE,CAAC;AAAX,GAAvB,EAAuCC,KAAvC,CAA6C,CAA7C,CAApB;AACA,QAAMC,MAAM,GAAG,MAAMV,MAAM,CAACM,OAAP,CAAe,EAAf,CAArB;AACA,QAAMK,iBAAiB,GAAG,MAAMb,WAAW,CAACc,IAAZ,CAAiB,EAAjB,EAAqBC,KAArB,EAAhC;AACA,QAAMC,aAAa,GAAG,MAAMf,aAAa,CAACa,IAAd,CAAmB,EAAnB,EAAuBC,KAAvB,EAA5B;AACA,QAAME,WAAW,GAAGJ,iBAAiB,GAAGG,aAAxC;AACA,SAAO;AACLT,IAAAA,KAAK,EAAEA,KAAK,CAACG,MADR;AAELQ,IAAAA,MAAM,EAAEN,MAAM,CAACM,MAFV;AAGLC,IAAAA,GAAG,EAAEP,MAAM,CAACO,GAHP;AAILC,IAAAA,IAAI,EAAER,MAAM,CAACQ,IAJR;AAKLH,IAAAA;AALK,GAAP;AAOD,CAbD;AAeArB,MAAM,CAACQ,GAAP,CAAW,cAAX,EAA2B,OAAO;AAAEC,EAAAA;AAAF,CAAP,EAAgBC,GAAhB,KAAwB;AACjD,QAAMe,MAAM,GAAG,MAAMrB,WAAW,CAACsB,SAAZ,CAAsB,CACzC;AACEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,SAAS,EAAE;AACTC,QAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAvB,GAA8B,KAAK,EAAL,GAAU,EAAV,GAAe;AAD1C;AADL;AADV,GADyC,EAQzC;AACEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAE;AACHC,QAAAA,IAAI,EAAE;AACJC,UAAAA,KAAK,EAAE;AACLC,YAAAA,IAAI,EAAE,CAAC,IAAIN,IAAJ,CAAS,CAAT,CAAD,EAAc;AAAEO,cAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,YAAP;AAAb,aAAd;AADD;AADH,SADH;AAMHC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAE;AACNH,YAAAA,IAAI,EAAE,CAAC,IAAIN,IAAJ,CAAS,CAAT,CAAD,EAAc;AAAEO,cAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,YAAP;AAAb,aAAd;AADA;AADF,SANL;AAWHG,QAAAA,GAAG,EAAE;AACHC,UAAAA,WAAW,EAAE;AACXL,YAAAA,IAAI,EAAE,CAAC,IAAIN,IAAJ,CAAS,CAAT,CAAD,EAAc;AAAEO,cAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,YAAP;AAAb,aAAd;AADK;AADV;AAXF,OADC;AAkBNlB,MAAAA,KAAK,EAAE;AAAEuB,QAAAA,IAAI,EAAE;AAAR;AAlBD;AADV,GARyC,CAAtB,CAArB;AA+BA,QAAMC,IAAI,GAAGlB,MAAM,CAACZ,IAAP,CAAY,CAAC+B,CAAD,EAAIC,CAAJ,KAAU;AACjC,QAAID,CAAC,CAACX,GAAF,CAAMC,IAAN,KAAeW,CAAC,CAACZ,GAAF,CAAMC,IAAzB,EAA+B;AAC7B,UAAIU,CAAC,CAACX,GAAF,CAAMK,MAAN,KAAiBO,CAAC,CAACZ,GAAF,CAAMK,MAA3B,EAAmC;AACjC,eAAOM,CAAC,CAACX,GAAF,CAAMO,GAAN,GAAYK,CAAC,CAACZ,GAAF,CAAMO,GAAzB;AACD;;AACD,aAAOI,CAAC,CAACX,GAAF,CAAMK,MAAN,GAAeO,CAAC,CAACZ,GAAF,CAAMK,MAA5B;AACD;;AACD,WAAOM,CAAC,CAACX,GAAF,CAAMC,IAAN,GAAaW,CAAC,CAACZ,GAAF,CAAMC,IAA1B;AACD,GARY,CAAb;AASA,SAAOS,IAAP;AACD,CA1CD;AA4CA3C,MAAM,CAACQ,GAAP,CAAW,aAAX,EAA0B,OAAO;AAAEC,EAAAA;AAAF,CAAP,EAAgBC,GAAhB,KAAwB;AAChD,QAAMC,KAAK,GAAG,MAAMR,KAAK,CAACe,IAAN,CAAW,EAAX,EAAe4B,IAAf,CAAoB,IAApB,EAA0BjC,IAA1B,CAA+B;AAAEC,IAAAA,MAAM,EAAE,CAAC;AAAX,GAA/B,EAA+CC,KAA/C,CAAqD,EAArD,CAApB;AACA,QAAMgC,WAAW,GAAGpC,KAAK,CAACA,KAAK,CAACqC,MAAN,GAAe,CAAhB,CAAL,CAAwBlC,MAA5C;AACA,QAAMmC,OAAO,GAAG,MAAM7C,WAAW,CAACsB,SAAZ,CAAsB,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEoB,MAAAA,WAAW,EAAE;AAAElB,QAAAA,IAAI,EAAEkB;AAAR;AAAf;AAAV,GAAD,EAAqD;AAAEf,IAAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAE,cAAP;AAAuBd,MAAAA,KAAK,EAAE;AAAEuB,QAAAA,IAAI,EAAE;AAAR;AAA9B;AAAV,GAArD,CAAtB,CAAtB;AACA,MAAIQ,IAAI,GAAG,EAAX;AACAD,EAAAA,OAAO,CAACE,OAAR,CAAiBC,GAAD,IAAS;AACvBF,IAAAA,IAAI,CAACE,GAAG,CAACnB,GAAL,CAAJ,GAAgBmB,GAAG,CAACjC,KAApB;AACD,GAFD;AAGAR,EAAAA,KAAK,CAACwC,OAAN,CAAeE,GAAD,IAAS;AACrBA,IAAAA,GAAG,CAACD,GAAJ,GAAUF,IAAI,CAACG,GAAG,CAACvC,MAAL,CAAJ,IAAoB,CAA9B;AACD,GAFD;AAGA,SAAOb,YAAY,CAACU,KAAD,CAAnB;AACD,CAZD;AAcAX,MAAM,CAACQ,GAAP,CAAW,aAAX,EAA0B,OAAO;AAAEC,EAAAA;AAAF,CAAP,EAAgBC,GAAhB,KAAwB;AAChD,QAAMuC,OAAO,GAAG,MAAM7C,WAAW,CAACc,IAAZ,CAAiB,EAAjB,EAAqB4B,IAArB,CAA0B,IAA1B,EAAgCjC,IAAhC,CAAqC;AAAEkC,IAAAA,WAAW,EAAE,CAAC;AAAhB,GAArC,EAA0DhC,KAA1D,CAAgE,EAAhE,CAAtB;AACA,SAAOkC,OAAP;AACD,CAHD","sourcesContent":["import Router from './core/router'\nimport { filterBlocks } from '../utils/common'\nimport mongoose from 'mongoose'\n\nconst { Block, Transaction, TokenTransfer, Market } = mongoose.models\n\nRouter.get('/home/info', async ({ url }, res) => {\n  const block = await Block.findOne({}).sort({ number: -1 }).limit(1)\n  const market = await Market.findOne({})\n  const transactionNumber = await Transaction.find({}).count()\n  const tokenTransfer = await TokenTransfer.find({}).count()\n  const tradeNumber = transactionNumber + tokenTransfer\n  return {\n    block: block.number,\n    change: market.change,\n    vol: market.vol,\n    last: market.last,\n    tradeNumber\n  }\n})\n\nRouter.get('/home/charts', async ({ url }, res) => {\n  const charts = await Transaction.aggregate([\n    {\n      $match: {\n        timestamp: {\n          $gte: new Date().getTime() / 1000 - 10 * 24 * 60 * 60\n        }\n      }\n    },\n    {\n      $group: {\n        _id: {\n          year: {\n            $year: {\n              $add: [new Date(0), { $multiply: [1000, '$timestamp'] }]\n            }\n          },\n          mmonth: {\n            $month: {\n              $add: [new Date(0), { $multiply: [1000, '$timestamp'] }]\n            }\n          },\n          day: {\n            $dayOfMonth: {\n              $add: [new Date(0), { $multiply: [1000, '$timestamp'] }]\n            }\n          }\n        },\n        count: { $sum: 1 }\n      }\n    }\n  ])\n  const list = charts.sort((a, b) => {\n    if (a._id.year === b._id.year) {\n      if (a._id.mmonth === b._id.mmonth) {\n        return a._id.day - b._id.day\n      }\n      return a._id.mmonth - b._id.mmonth\n    }\n    return a._id.year - b._id.year\n  })\n  return list\n})\n\nRouter.get('/home/block', async ({ url }, res) => {\n  const block = await Block.find({}).lean(true).sort({ number: -1 }).limit(10)\n  const blockNumber = block[block.length - 1].number\n  const results = await Transaction.aggregate([{ $match: { blockNumber: { $gte: blockNumber } } }, { $group: { _id: '$blockNumber', count: { $sum: 1 } } }])\n  let txns = {}\n  results.forEach((txn) => {\n    txns[txn._id] = txn.count\n  })\n  block.forEach((doc) => {\n    doc.txn = txns[doc.number] || 0\n  })\n  return filterBlocks(block)\n})\n\nRouter.get('/home/trade', async ({ url }, res) => {\n  const results = await Transaction.find({}).lean(true).sort({ blockNumber: -1 }).limit(10)\n  return results\n})\n"]},"metadata":{},"sourceType":"module"}