{"ast":null,"code":"'use strict';\n\nvar BigNumber = require('bignumber.js');\n\nvar etherUnits = function etherUnits() {};\n\netherUnits.unitMap = {\n  wei: '1',\n  kwei: '1000',\n  ada: '1000',\n  femtoether: '1000',\n  mwei: '1000000',\n  babbage: '1000000',\n  picoether: '1000000',\n  gwei: '1000000000',\n  shannon: '1000000000',\n  nanoether: '1000000000',\n  nano: '1000000000',\n  szabo: '1000000000000',\n  microether: '1000000000000',\n  micro: '1000000000000',\n  finney: '1000000000000000',\n  milliether: '1000000000000000',\n  milli: '1000000000000000',\n  ether: '1000000000000000000',\n  kether: '1000000000000000000000',\n  grand: '1000000000000000000000',\n  einstein: '1000000000000000000000',\n  mether: '1000000000000000000000000',\n  gether: '1000000000000000000000000000',\n  tether: '1000000000000000000000000000000'\n};\n\netherUnits.getValueOfUnit = function (unit) {\n  unit = unit ? unit.toLowerCase() : 'ether';\n  var unitValue = this.unitMap[unit];\n\n  if (unitValue === undefined) {\n    throw new Error(globalFuncs.errorMsgs[4] + JSON.stringify(this.unitMap, null, 2));\n  }\n\n  return new BigNumber(unitValue, 10);\n};\n\netherUnits.toEther = function (number, unit) {\n  var returnValue = new BigNumber(this.toWei(number, unit)).div(this.getValueOfUnit('ether'));\n  return returnValue.toString(10);\n};\n\netherUnits.toGwei = function (number, unit) {\n  var returnValue = new BigNumber(this.toWei(number, unit)).div(this.getValueOfUnit('gwei'));\n  return returnValue.toString(10);\n};\n\netherUnits.toWei = function (number, unit) {\n  var returnValue = new BigNumber(String(number)).times(this.getValueOfUnit(unit));\n  return returnValue.toString(10);\n};\n\nmodule.exports = etherUnits;","map":null,"metadata":{},"sourceType":"script"}