{"ast":null,"code":"import Web3 from 'web3-ccm';\nconst config = process.cfg.config;\n\nconst getProvider = () => {\n  const provider = new Web3.providers.WebsocketProvider(`ws://${config.nodeAddr}:${config.wsPort.toString()}`);\n  provider.on('connect', () => console.log('WS Connected'));\n  provider.on('error', e => {\n    console.error('WS Error', e);\n    web3.setProvider(getProvider());\n  });\n  provider.on('end', e => {\n    console.error('WS End', e);\n    web3.setProvider(getProvider());\n  });\n  return provider;\n};\n\nconst getWeb3 = () => {\n  var _global$web;\n\n  if ((_global$web = global.web3) === null || _global$web === void 0 ? void 0 : _global$web.eth) {\n    return global.web3;\n  } else {\n    const web3 = new Web3(getProvider());\n    global.web3 = web3;\n    return web3;\n  }\n};\n\nexport default getWeb3();","map":{"version":3,"sources":["/Users/libaozhong/cr/ccm-front/api/core/monitorWeb3.js"],"names":["Web3","config","process","cfg","getProvider","provider","providers","WebsocketProvider","nodeAddr","wsPort","toString","on","console","log","e","error","web3","setProvider","getWeb3","global","eth"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,UAAjB;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYF,MAA3B;;AAEA,MAAMG,WAAW,GAAG,MAAM;AACxB,QAAMC,QAAQ,GAAG,IAAIL,IAAI,CAACM,SAAL,CAAeC,iBAAnB,CAAsC,QAAON,MAAM,CAACO,QAAS,IAAGP,MAAM,CAACQ,MAAP,CAAcC,QAAd,EAAyB,EAAzF,CAAjB;AACAL,EAAAA,QAAQ,CAACM,EAAT,CAAY,SAAZ,EAAuB,MAAMC,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA7B;AACAR,EAAAA,QAAQ,CAACM,EAAT,CAAY,OAAZ,EAAsBG,CAAD,IAAO;AAC1BF,IAAAA,OAAO,CAACG,KAAR,CAAc,UAAd,EAA0BD,CAA1B;AACAE,IAAAA,IAAI,CAACC,WAAL,CAAiBb,WAAW,EAA5B;AACD,GAHD;AAIAC,EAAAA,QAAQ,CAACM,EAAT,CAAY,KAAZ,EAAoBG,CAAD,IAAO;AACxBF,IAAAA,OAAO,CAACG,KAAR,CAAc,QAAd,EAAwBD,CAAxB;AACAE,IAAAA,IAAI,CAACC,WAAL,CAAiBb,WAAW,EAA5B;AACD,GAHD;AAKA,SAAOC,QAAP;AACD,CAbD;;AAeA,MAAMa,OAAO,GAAG,MAAM;AAAA;;AACpB,qBAAIC,MAAM,CAACH,IAAX,gDAAI,YAAaI,GAAjB,EAAsB;AACpB,WAAOD,MAAM,CAACH,IAAd;AACD,GAFD,MAEO;AACL,UAAMA,IAAI,GAAG,IAAIhB,IAAJ,CAASI,WAAW,EAApB,CAAb;AACAe,IAAAA,MAAM,CAACH,IAAP,GAAcA,IAAd;AACA,WAAOA,IAAP;AACD;AACF,CARD;;AAUA,eAAeE,OAAO,EAAtB","sourcesContent":["import Web3 from 'web3-ccm'\n\nconst config = process.cfg.config\n\nconst getProvider = () => {\n  const provider = new Web3.providers.WebsocketProvider(`ws://${config.nodeAddr}:${config.wsPort.toString()}`)\n  provider.on('connect', () => console.log('WS Connected'))\n  provider.on('error', (e) => {\n    console.error('WS Error', e)\n    web3.setProvider(getProvider())\n  })\n  provider.on('end', (e) => {\n    console.error('WS End', e)\n    web3.setProvider(getProvider())\n  })\n\n  return provider\n}\n\nconst getWeb3 = () => {\n  if (global.web3?.eth) {\n    return global.web3\n  } else {\n    const web3 = new Web3(getProvider())\n    global.web3 = web3\n    return web3\n  }\n}\n\nexport default getWeb3()\n"]},"metadata":{},"sourceType":"module"}