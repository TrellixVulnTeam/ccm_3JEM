{"ast":null,"code":"import Router from './core/router';\nimport mongoose from 'mongoose';\nimport { parseQueryString, handleAllTrade } from '../utils/common';\nconst {\n  Transaction,\n  Account,\n  Contract,\n  TokenTransfer,\n  Block\n} = mongoose.models;\nRouter.get('/addr/info/{addr}', async ({\n  params\n}) => {\n  const account = await Account.findOne({\n    address: params.addr\n  });\n  const transaction = await Transaction.find(handleAllTrade('all', params.addr)).count();\n  const tokenTransfer = await TokenTransfer.aggregate([{\n    $match: {\n      $or: [{\n        from: params.addr\n      }, {\n        to: params.addr\n      }]\n    }\n  }, {\n    $group: {\n      _id: '$contract'\n    }\n  }]);\n  let token = await Promise.all(tokenTransfer.map(async item => {\n    return await Contract.findOne({\n      address: item._id\n    });\n  }));\n  let list = [];\n  token.forEach(item => {\n    item && list.push(item);\n  });\n  return {\n    token: list,\n    balance: account === null || account === void 0 ? void 0 : account._doc.balance,\n    tradeNumber: transaction\n  };\n});\nRouter.get('/addr/info/trade/{addr}', async ({\n  params,\n  url\n}) => {\n  const paramQuery = parseQueryString(url);\n  const ps = parseInt(paramQuery.ps) || 10;\n  const pn = parseInt(paramQuery.pn) || 1;\n  const rows = await Transaction.find(handleAllTrade(paramQuery.trade, params.addr)).sort({\n    blockNumber: -1\n  }).skip((pn - 1) * ps).limit(ps);\n  const total = await Transaction.find(handleAllTrade(paramQuery.trade, params.addr)).count();\n  return {\n    rows,\n    total\n  };\n});\nRouter.get('/addr/info/tokenTrade/{addr}', async ({\n  params,\n  url\n}) => {\n  const paramQuery = parseQueryString(url);\n  const ps = parseInt(paramQuery.ps) || 10;\n  const pn = parseInt(paramQuery.pn) || 1;\n  let tokenTransfer = await Transaction.find({\n    $or: [{\n      from: params.addr\n    }, {\n      addr: params.addr\n    }],\n    $and: [{\n      value: '0'\n    }, {\n      to: {\n        $exists: true\n      }\n    }]\n  }).lean(true).sort({\n    blockNumber: -1\n  }).skip((pn - 1) * ps).limit(ps);\n  const list = await Promise.all(tokenTransfer.map(async item => {\n    return await Contract.findOne({\n      address: item.to\n    });\n  }));\n  tokenTransfer.forEach(item => {\n    const contract = list.find(li => item.to.toUpperCase() === li.address.toUpperCase());\n    item.symbol = contract.symbol;\n    item.decimals = contract.decimals;\n  });\n  const total = await Transaction.find({\n    $or: [{\n      from: params.addr\n    }, {\n      addr: params.addr\n    }],\n    $and: [{\n      value: '0'\n    }]\n  }).count();\n  return {\n    rows: tokenTransfer,\n    total\n  };\n});","map":null,"metadata":{},"sourceType":"module"}