{"ast":null,"code":"var placezero = function placezero(num) {\n  return num > 10 ? '' + num : '0' + num;\n};\n\nexport var dateid = function dateid() {\n  var cur = new Date();\n  return placezero(cur.getHours()) + placezero(cur.getMinutes()) + placezero(cur.getSeconds()) + placezero(cur.getDate()) + ('' + Math.random()).substring(2, 6);\n};\nexport var format = function format(date) {\n  if (date) {\n    return placezero(date.getFullYear()) + '-' + placezero(date.getMonth() + 1) + '-' + placezero(date.getDate()) + ' ' + placezero(date.getHours()) + ':' + placezero(date.getMinutes()) + ':' + placezero(date.getSeconds());\n  } else {\n    return null;\n  }\n};\n/*\n  Convert unix timestamp to something that doesn't suck\n*/\n\nexport var getDuration = function getDuration(timestamp, lang) {\n  var number = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var millis = Date.now() - timestamp * 1000;\n  var dur = [];\n  var units = [{\n    labelZh: '毫秒',\n    label: 'millis',\n    mod: 1000\n  }, {\n    labelZh: '秒',\n    label: 'seconds',\n    mod: 60\n  }, {\n    labelZh: '分钟',\n    label: 'mins',\n    mod: 60\n  }, {\n    labelZh: '小时',\n    label: 'hours',\n    mod: 24\n  }, {\n    labelZh: '天',\n    label: 'days',\n    mod: 365\n  }, {\n    labelZh: '年',\n    label: 'years',\n    mod: 1000\n  }]; // calculate the individual unit values\n\n  units.forEach(function (u) {\n    var val = millis % u.mod;\n    millis = (millis - val) / u.mod;\n    if (u.label == 'millis') return;\n    if (val > 0) dur.push({\n      label: lang === 'en' ? u.label : u.labelZh,\n      val: val\n    });\n  }); // convert object to string representation\n\n  dur.toString = function () {\n    return dur.reverse().slice(0, number).map(function (d) {\n      return d.val + ' ' + (d.val == 1 && lang === 'en' ? d.label.slice(0, -1) : d.label);\n    }).join(lang === 'en' ? ', ' : ' ');\n  };\n\n  return dur;\n};","map":{"version":3,"sources":["/Users/libaozhong/cr/ccm-front/utils/date.js"],"names":["placezero","num","dateid","cur","Date","getHours","getMinutes","getSeconds","getDate","Math","random","substring","format","date","getFullYear","getMonth","getDuration","timestamp","lang","number","millis","now","dur","units","labelZh","label","mod","forEach","u","val","push","toString","reverse","slice","map","d","join"],"mappings":"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","sourcesContent":["const placezero = (num) => {\n  return num > 10 ? '' + num : '0' + num;\n};\n\nexport const dateid = () => {\n  const cur = new Date();\n  return (\n    placezero(cur.getHours()) +\n    placezero(cur.getMinutes()) +\n    placezero(cur.getSeconds()) +\n    placezero(cur.getDate()) +\n    ('' + Math.random()).substring(2, 6)\n  );\n};\n\nexport const format = (date) => {\n  if (date) {\n    return (\n      placezero(date.getFullYear()) +\n      '-' +\n      placezero(date.getMonth() + 1) +\n      '-' +\n      placezero(date.getDate()) +\n      ' ' +\n      placezero(date.getHours()) +\n      ':' +\n      placezero(date.getMinutes()) +\n      ':' +\n      placezero(date.getSeconds())\n    );\n  } else {\n    return null;\n  }\n};\n\n/*\n  Convert unix timestamp to something that doesn't suck\n*/\nexport const getDuration = (timestamp, lang, number = 1) => {\n  var millis = Date.now() - timestamp * 1000;\n  var dur = [];\n  var units = [\n    { labelZh: '毫秒', label: 'millis', mod: 1000 },\n    { labelZh: '秒', label: 'seconds', mod: 60 },\n    { labelZh: '分钟', label: 'mins', mod: 60 },\n    { labelZh: '小时', label: 'hours', mod: 24 },\n    { labelZh: '天', label: 'days', mod: 365 },\n    { labelZh: '年', label: 'years', mod: 1000 },\n  ];\n  // calculate the individual unit values\n  units.forEach(function (u) {\n    var val = millis % u.mod;\n    millis = (millis - val) / u.mod;\n    if (u.label == 'millis') return;\n    if (val > 0)\n      dur.push({ label: lang === 'en' ? u.label : u.labelZh, val: val });\n  });\n  // convert object to string representation\n  dur.toString = function () {\n    return dur\n      .reverse()\n      .slice(0, number)\n      .map(function (d) {\n        return (\n          d.val +\n          ' ' +\n          (d.val == 1 && lang === 'en' ? d.label.slice(0, -1) : d.label)\n        );\n      })\n      .join(lang === 'en' ? ', ' : ' ');\n  };\n  return dur;\n};\n"]},"metadata":{},"sourceType":"module"}