{"ast":null,"code":"import \"antd/lib/empty/style\";\nimport _Empty from \"antd/lib/empty\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useLayoutEffect } from 'react';\nimport React, { Component } from 'react';\nimport Styled from 'styled-components';\nimport http from '../../utils/http';\nimport { injectIntl } from 'react-intl';\nvar GridH5 = injectIntl(function (_ref) {\n  var url = _ref.url,\n      columns = _ref.columns,\n      _ref$otherParam = _ref.otherParam,\n      otherParam = _ref$otherParam === void 0 ? '' : _ref$otherParam,\n      isShow = _ref.isShow,\n      intl = _ref.intl;\n\n  var _useState = useState([]),\n      gridData = _useState[0],\n      setGridData = _useState[1];\n\n  var ps = 6;\n\n  var _useState2 = useState(1),\n      pn = _useState2[0],\n      setPn = _useState2[1];\n\n  var _useState3 = useState(0),\n      totalPage = _useState3[0],\n      setTotalPage = _useState3[1];\n\n  var _useState4 = useState(true),\n      first = _useState4[0],\n      setFirst = _useState4[1];\n\n  var init = function init(number, type) {\n    http.get(\"\".concat(url, \"?pn=\").concat(number || pn, \"&ps=\").concat(ps).concat(otherParam), function (data) {\n      var number = data.total % ps === 0 ? data.total / ps : Math.ceil(data.total / ps);\n      setTotalPage(number);\n      setGridData(type === 'concat' ? gridData.concat(data.rows) : data.rows);\n    });\n  };\n\n  useEffect(function () {\n    isShow && init();\n  }, []);\n  useEffect(function () {\n    if (first) {\n      setFirst(false);\n    } else {\n      setPn(1);\n      init(1);\n    }\n  }, [otherParam]);\n\n  var handleNextPage = function handleNextPage() {\n    setPn(pn + 1);\n    init(pn + 1, 'concat');\n  };\n\n  return __jsx(Box, null, gridData.map(function (item) {\n    return __jsx(GridList, {\n      key: item._id\n    }, __jsx(\"div\", {\n      className: \"rs-h5-grid-title\"\n    }, columns[0].title, \" # \", columns[0].render(item[columns[0].dataIndex], item)), columns.slice(1).map(function (col) {\n      return col.h5 ? __jsx(\"div\", {\n        className: \"rs-h5-table-li\",\n        key: col.dataIndex\n      }, __jsx(\"span\", null, col.title, \":\"), __jsx(\"p\", null, col.render(item[col.dataIndex], item))) : '';\n    }));\n  }), gridData.length === 0 && __jsx(_Empty, {\n    style: {\n      paddingTop: 20\n    }\n  }), totalPage !== 0 && pn < totalPage && __jsx(\"div\", {\n    className: \"next-page\",\n    onClick: function onClick() {\n      return handleNextPage();\n    }\n  }, intl.messages.lang63));\n});\nvar Box = Styled.div.withConfig({\n  displayName: \"Grid-h5__Box\",\n  componentId: \"sc-1jk98l4-0\"\n})([\"padding-bottom:30px;.next-page{margin-top:20px;text-align:center;color:#1890ff;height:50px;line-height:50px;font-size:16px;}\"]);\nvar GridList = Styled.div.withConfig({\n  displayName: \"Grid-h5__GridList\",\n  componentId: \"sc-1jk98l4-1\"\n})([\"box-shadow:0 0 8px 0 hsla(0,0%,40%,.11);background:#fff;padding:10px;margin-bottom:10px;border-radius:6px;.rs-h5-grid-title{height:30px;line-height:30px;border-bottom:1px solid #eee;margin-bottom:10px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;}.rs-h5-table-li{display:flex;line-height:25px;> span{text-align:right;color:rgb(119,130,177);padding-right:10px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;}p{flex:1;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0;}}\"]);\nexport default GridH5;","map":null,"metadata":{},"sourceType":"module"}