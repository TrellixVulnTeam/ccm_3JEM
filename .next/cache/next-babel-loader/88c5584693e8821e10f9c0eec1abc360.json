{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport unfetch from 'isomorphic-unfetch';\nimport { getCookies } from './cookie';\nimport { dateid } from '../utils/date';\nvar errorTip = _message;\nexport var fetch = function fetch(url, ctx) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!url.startsWith('http')) {\n    url = \"http://localhost:\".concat(process.cfg.server.port).concat(url);\n  }\n\n  return unfetch(url, params).then(function (response) {\n    if (response.ok) {\n      return response.text().then(jsonIt);\n    }\n\n    throw {\n      status: response.status,\n      response: response\n    };\n  })[\"catch\"](function (err) {\n    var status = err.status;\n    console.error(\"request api \".concat(url, \" status\\uFF1A\").concat(status, \" error\\uFF1A\"), err);\n\n    if (status === 401) {\n      ctx.res.writeHead(302, {\n        Location: '/login'\n      });\n    } else {\n      ctx.res.writeHead(status !== null && status !== void 0 ? status : 500);\n    }\n\n    ctx.res.end();\n  });\n};\n\nvar mkops = function mkops(method, data) {\n  var payload = {\n    method: method,\n    headers: {}\n  };\n\n  if (method !== 'GET') {\n    payload.headers['Content-Type'] = 'application/json; charset=utf-8';\n\n    if (method !== 'DELETE') {\n      payload.body = JSON.stringify(data || {});\n    }\n  }\n\n  return payload;\n};\n\nvar jsonIt = function jsonIt(d) {\n  try {\n    return JSON.parse(d);\n  } catch (e) {\n    return {\n      code: 600,\n      message: e.message,\n      text: d\n    };\n  }\n};\n\nvar send = function send(url, options, success, error) {\n  return unfetch(url, options).then(function _callee(response) {\n    var data, _data;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!response.ok) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(response.text().then(jsonIt));\n\n          case 3:\n            data = _context.sent;\n            success === null || success === void 0 ? void 0 : success(data);\n            return _context.abrupt(\"return\", Promise.resolve(data));\n\n          case 8:\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(response.text().then(jsonIt));\n\n          case 10:\n            _data = _context.sent;\n\n            if (!(_data.code === 600)) {\n              _context.next = 15;\n              break;\n            }\n\n            throw {\n              code: response.status,\n              message: response.statusText,\n              date: dateid()\n            };\n\n          case 15:\n            throw _data;\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  })[\"catch\"](function _callee2(err) {\n    var date, code, message;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(err);\n            date = err.date, code = err.code, message = err.message;\n\n            if (!error) {\n              _context2.next = 5;\n              break;\n            }\n\n            error(err);\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            if (code == 400) {\n              errorTip.error(message);\n            } else if (code === 401) {\n              location.href = '/login';\n            } else if (code == 500) {\n              errorTip.error(\"\".concat(date, \".\").concat(code, \" Server Error\"));\n            } else if ((code / 100 | 0) == 5) {\n              errorTip.error('Server Error');\n            } else if (code) {\n              errorTip.error(\"\".concat(date, \".\").concat(code, \" Server Error\"));\n            } else {\n              errorTip.error(\"\".concat(dateid(), \".604 Server Error\"));\n            }\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nexport default {\n  get: function get(url, success, error) {\n    return send(url, mkops('GET'), success, error);\n  },\n  post: function post(url, data, success, error) {\n    return send(url, mkops('POST', data), success, error);\n  },\n  patch: function patch(url, data, success, error) {\n    return send(url, mkops('PATCH', data), success, error);\n  },\n  put: function put(url, data, success, error) {\n    return send(url, mkops('PUT', data), success, error);\n  },\n  \"delete\": function _delete(url, success, error) {\n    return send(url, mkops('DELETE'), success, error);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}