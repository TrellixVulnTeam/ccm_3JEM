{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { RouterNotFoundError } from './error';\nexport default class Router {\n  static get(url, func) {\n    this.routerMap['GET'][url] = func;\n  }\n\n  static post(url, func) {\n    this.routerMap['POST'][url] = func;\n  }\n\n  static put(url, func) {\n    this.routerMap['PUT'][url] = func;\n  }\n\n  static patch(url, func) {\n    this.routerMap['PATCH'][url] = func;\n  }\n\n  static delete(url, func) {\n    this.routerMap['DELETE'][url] = func;\n  }\n\n}\n\n_defineProperty(Router, \"routerMap\", {\n  GET: {},\n  POST: {},\n  PUT: {},\n  PATCH: {},\n  DELETE: {}\n});\n\nexport const dispatchRequest = async (req, res) => {\n  const handleRouter = matchingRouter(req);\n\n  if (handleRouter) {\n    return await handleRouter(req, res);\n  }\n\n  throw new RouterNotFoundError('404 not found');\n};\n\nconst matchingRouter = req => {\n  const pathname = req.pathname.substring(4);\n  req.params = {}; //处理该类型请求的路由\n\n  const handleReqRouters = Router.routerMap[req.method];\n\n  if (handleReqRouters) {\n    const allRouterMethodName = Object.keys(handleReqRouters);\n    const reqPathArr = pathname.split('/').filter(s => s !== '');\n    const handleMethodName = allRouterMethodName.find(k => {\n      const routerPathArr = k.split('/').filter(s => s !== '');\n      const length = Math.max(reqPathArr.length, routerPathArr.length);\n\n      for (let i = 0; i < length; i++) {\n        const v1 = routerPathArr[i];\n        const v2 = reqPathArr[i];\n\n        if (v1 === v2) {\n          continue;\n        } else if (v1 && v2 && v1.startsWith('{')) {\n          req.params[v1.substring(1, v1.length - 1)] = v2;\n          continue;\n        }\n\n        return false;\n      }\n\n      return k;\n    });\n    return handleReqRouters[handleMethodName];\n  }\n};","map":null,"metadata":{},"sourceType":"module"}